{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\liisa\\\\Documents\\\\Koodit\\\\portfolio\\\\CodePortfolio\\\\surveysApp_javascript\\\\surveys_front\\\\src\\\\components\\\\charts\\\\BarChart.js\",\n    _s = $RefreshSig$();\n\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { useSurveyContext } from '../../contexts/SurveyContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst BarChart = props => {\n  _s();\n\n  const {\n    selectedSurvey\n  } = useSurveyContext();\n  const selectedQuestion = selectedSurvey.questions.filter(q => q.questionId === props.question);\n  const type = selectedQuestion[0].questionType;\n  let surveyAnswers = [];\n\n  if (type === \"dropdown\") {\n    surveyAnswers = selectedSurvey.answers.map(a => a[props.question]);\n  } else {\n    surveyAnswers = selectedSurvey.answers.map(a => {\n      newArr = surveyAnswers.concat(a[props.question]);\n      return newArr;\n    });\n  }\n\n  console.log(surveyAnswers);\n  const answerLabels = [...new Set(surveyAnswers)];\n  const answerCounts = answerLabels.map(label => {\n    const filtered = surveyAnswers.filter(answer => answer === label);\n    return filtered.length;\n  });\n  const labels = answerLabels;\n  const data = {\n    labels,\n    datasets: [{\n      label: 'answers',\n      data: answerCounts,\n      backgroundColor: 'rgba(55, 99, 132, 1)',\n      borderColor: 'rgb(55, 99, 132, 1)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(BarChart, \"ca3SUvhwJ6PJ55LPQ0pHj/7bvY4=\", false, function () {\n  return [useSurveyContext];\n});\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","useSurveyContext","register","BarChart","props","selectedSurvey","selectedQuestion","questions","filter","q","questionId","question","type","questionType","surveyAnswers","answers","map","a","newArr","concat","console","log","answerLabels","Set","answerCounts","label","filtered","answer","length","labels","data","datasets","backgroundColor","borderColor"],"sources":["C:/Users/liisa/Documents/Koodit/portfolio/CodePortfolio/surveysApp_javascript/surveys_front/src/components/charts/BarChart.js"],"sourcesContent":["import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, } from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport { useSurveyContext } from '../../contexts/SurveyContext.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nconst BarChart = (props) => {\r\n\r\n    const { selectedSurvey } = useSurveyContext();\r\n\r\n    const selectedQuestion = selectedSurvey.questions.filter(q => q.questionId === props.question);  \r\n    const type = selectedQuestion[0].questionType;\r\n    \r\n    let surveyAnswers = []\r\n    if (type === \"dropdown\") {\r\n        surveyAnswers = selectedSurvey.answers.map(a => a[props.question]);        \r\n    } else {\r\n        surveyAnswers = selectedSurvey.answers.map(a => {\r\n            newArr =surveyAnswers.concat(a[props.question]);        \r\n            return newArr\r\n        });\r\n    }\r\n\r\n    console.log(surveyAnswers);\r\n\r\n    const answerLabels = [...new Set(surveyAnswers)];\r\n    const answerCounts = answerLabels.map(label => {\r\n        const filtered = surveyAnswers.filter(answer => answer === label);\r\n        return filtered.length;\r\n    });\r\n    const labels = answerLabels;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'answers',\r\n                data: answerCounts,\r\n                backgroundColor: 'rgba(55, 99, 132, 1)',\r\n                borderColor: 'rgb(55, 99, 132, 1)'\r\n            },\r\n        ],\r\n    };\r\n    return (\r\n        <>\r\n            <Bar data={data} />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BarChart;"],"mappings":";;;AAAA,SAASA,KAAK,IAAIC,OAAlB,EAA2BC,aAA3B,EAA0CC,WAA1C,EAAuDC,UAAvD,EAAmEC,KAAnE,EAA0EC,OAA1E,EAAmFC,MAAnF,QAAkG,UAAlG;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;;;AAEAR,OAAO,CAACS,QAAR,CAAiBR,aAAjB,EAAgCC,WAAhC,EAA6CC,UAA7C,EAAyDC,KAAzD,EAAgEC,OAAhE,EAAyEC,MAAzE;;AAEA,MAAMI,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAExB,MAAM;IAAEC;EAAF,IAAqBJ,gBAAgB,EAA3C;EAEA,MAAMK,gBAAgB,GAAGD,cAAc,CAACE,SAAf,CAAyBC,MAAzB,CAAgCC,CAAC,IAAIA,CAAC,CAACC,UAAF,KAAiBN,KAAK,CAACO,QAA5D,CAAzB;EACA,MAAMC,IAAI,GAAGN,gBAAgB,CAAC,CAAD,CAAhB,CAAoBO,YAAjC;EAEA,IAAIC,aAAa,GAAG,EAApB;;EACA,IAAIF,IAAI,KAAK,UAAb,EAAyB;IACrBE,aAAa,GAAGT,cAAc,CAACU,OAAf,CAAuBC,GAAvB,CAA2BC,CAAC,IAAIA,CAAC,CAACb,KAAK,CAACO,QAAP,CAAjC,CAAhB;EACH,CAFD,MAEO;IACHG,aAAa,GAAGT,cAAc,CAACU,OAAf,CAAuBC,GAAvB,CAA2BC,CAAC,IAAI;MAC5CC,MAAM,GAAEJ,aAAa,CAACK,MAAd,CAAqBF,CAAC,CAACb,KAAK,CAACO,QAAP,CAAtB,CAAR;MACA,OAAOO,MAAP;IACH,CAHe,CAAhB;EAIH;;EAEDE,OAAO,CAACC,GAAR,CAAYP,aAAZ;EAEA,MAAMQ,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQT,aAAR,CAAJ,CAArB;EACA,MAAMU,YAAY,GAAGF,YAAY,CAACN,GAAb,CAAiBS,KAAK,IAAI;IAC3C,MAAMC,QAAQ,GAAGZ,aAAa,CAACN,MAAd,CAAqBmB,MAAM,IAAIA,MAAM,KAAKF,KAA1C,CAAjB;IACA,OAAOC,QAAQ,CAACE,MAAhB;EACH,CAHoB,CAArB;EAIA,MAAMC,MAAM,GAAGP,YAAf;EAEA,MAAMQ,IAAI,GAAG;IACTD,MADS;IAETE,QAAQ,EAAE,CACN;MACIN,KAAK,EAAE,SADX;MAEIK,IAAI,EAAEN,YAFV;MAGIQ,eAAe,EAAE,sBAHrB;MAIIC,WAAW,EAAE;IAJjB,CADM;EAFD,CAAb;EAWA,oBACI;IAAA,uBACI,QAAC,GAAD;MAAK,IAAI,EAAEH;IAAX;MAAA;MAAA;MAAA;IAAA;EADJ,iBADJ;AAKH,CA1CD;;GAAM3B,Q;UAEyBF,gB;;;KAFzBE,Q;AA4CN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}